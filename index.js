// Generated by CoffeeScript 1.6.3
(function() {
  $(document).ready(function() {
    var child1, newroot;
    $("#show-instructions").on("click", function() {
      if ($('#instructions').height() === 0) {
        $('#instructions').animate({
          height: $('#instructions')[0].scrollHeight + 'px'
        }, 500);
        $(this).addClass("rotate90");
      } else {
        $('#instructions').animate({
          height: '0px'
        }, 500);
        $(this).removeClass("rotate90");
      }
    });
    window.graph = new Graph;
    window.graphUI = new Graph.vis(graph, $('#graph'));
    window.graph = graph;
    window.graphUI = graphUI;
    graph.addNode(null, null).d3.html = 'Click me<br>to edit text';
    child1 = graph.addNode(null, 0);
    child1.d3.html = 'Child 1';
    graph.addNode(null, 0).d3.html = '<i class="fa fa-arrow-left"></i> Drag me onto Child 1';
    newroot = graph.addNode(null, child1.id);
    newroot.d3.html = 'Drag me into<br>a blank area';
    graph.addNode(null, newroot.id).d3.html = 'Click me, then<br>click the <i class="fa fa-plus-circle"></i>';
    graph.addNode(null, newroot.id);
    graph.addNode(null, child1.id).d3.html = 'Drag me<br>into the <i class="fa fa-trash-o">';
    graphUI.redraw();
    $(document).on("click", ".node", function(e) {
      $(this).attr("contenteditable", "true");
      return true;
    });
    $(document).on("keyup", ".node", function(e) {
      var id;
      id = parseInt($(this).attr("data-id"));
      graph.node(id).d3.html = $(this).html();
      graphUI.redraw();
      return true;
    });
    $(document).on("blur", ".node", function(e) {
      $(this).attr("contenteditable", "false");
      graphUI.redraw();
      return true;
    });
    $(document).on("click", ".node", function(e) {
      var button, container, id;
      e.stopPropagation();
      e.preventDefault();
      id = $(this).attr("data-id");
      $(".add-node-btn").not("[data-id=" + id + "]").fadeOut(100);
      container = $(this).parent();
      if ($(container).find(".add-node-btn").length === 0) {
        button = $("<i></i>").attr("class", "add-node-btn fa fa-plus-circle").attr("data-id", id).hide();
        $(container).append(button);
      }
      return $(container).find(".add-node-btn").fadeIn(250);
    });
    $(document).on("click", "body", function(e) {
      e.stopPropagation();
      e.preventDefault();
      $(".add-node-btn").fadeOut(100);
      return $(".node").attr("contenteditable", "false");
    });
    $(document).on("click", ".add-node-btn", function(e) {
      var node;
      e.stopPropagation();
      e.preventDefault();
      node = parseInt($(this).attr("data-id"));
      graph.addNode("?", node);
      return graphUI.redraw();
    });
    $(document).on("dragover", function(e) {
      e.preventDefault();
      return false;
    });
    $(document).on("dragstart", ".node", function(e) {
      e.originalEvent.dataTransfer.setData("text", $(this).attr("data-id"));
    });
    $(document).on("dragenter", ".fa-trash-o", function(e) {
      console.log("dragenter");
      return $(this).addClass("dragover");
    });
    $(document).on("dragleave", ".fa-trash-o", function(e) {
      return $(this).removeClass("dragover");
    });
    $(document).on("drop", ".fa-trash-o", function(e) {
      var deleteAll, dragged;
      e.stopPropagation();
      e.preventDefault();
      dragged = parseInt(e.originalEvent.dataTransfer.getData("text"));
      deleteAll = function(id) {
        var child, node, _i, _len, _ref;
        node = graph.node(id);
        if (node.children.length > 0) {
          _ref = node.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            deleteAll(child);
          }
        }
        return graph.removeNode(id);
      };
      deleteAll(dragged);
      d3.selectAll("#graph line[data-child='" + dragged + "']").remove();
      graphUI.redraw();
      setTimeout(function() {
        return $("#trashcan").removeClass("dragover");
      }, 500);
    });
    $(document).on("drop", "body", function(e) {
      var dragged;
      e.stopPropagation();
      e.preventDefault();
      dragged = parseInt(e.originalEvent.dataTransfer.getData("text"));
      if (dragged !== null) {
        graph.moveNode(dragged, null);
      }
      console.log(d3.selectAll("#graph line[data-child='" + dragged + "']"));
      d3.selectAll("#graph line[data-child='" + dragged + "']").remove();
      graphUI.redraw();
    });
    return $(document).on("drop", ".node", function(e) {
      var dest, dragged;
      e.stopPropagation();
      e.preventDefault();
      dragged = parseInt(e.originalEvent.dataTransfer.getData("text"));
      dest = parseInt($(this).attr("data-id"));
      if (dragged === dest) {
        return;
      }
      if (dragged !== null) {
        graph.moveNode(dragged, dest);
      }
      graphUI.redraw();
    });
  });

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
