// Generated by CoffeeScript 1.6.3
(function() {
  var getData, resetFormElement, setData;

  $(document).ready(function() {
    var child1, child2, newroot;
    window.graph = new Graph;
    window.graphUI = new Graph.vis(graph, $('#graph'));
    window.graph = graph;
    window.graphUI = graphUI;
    graph.addNode(null, null).d3.html = 'Root Node';
    child1 = graph.addNode(null, 0);
    child1.d3.html = 'Child 1';
    child2 = graph.addNode(null, 0);
    child2.d3.html = '<i class="fa fa-arrow-left"></i> Drag me under Child 1';
    graph.addNode(null, child2.id).d3.html = 'Click me<br>to edit text';
    newroot = graph.addNode(null, child1.id);
    newroot.d3.html = 'Drag me above<br>the Root Node';
    graph.addNode(null, newroot.id).d3.html = 'Click me, then<br>click the <i class="fa fa-plus-circle"></i>';
    graph.addNode(null, newroot.id);
    graph.addNode(null, child1.id).d3.html = 'Drag me<br>into the <i class="fa fa-trash-o">';
    graphUI.redraw();
    $("#show-instructions").on("click", function() {
      if ($('#instructions').height() === 0) {
        $('#instructions').animate({
          height: $('#instructions')[0].scrollHeight + 'px'
        }, 500);
        $(this).addClass("rotate90");
      } else {
        $('#instructions').animate({
          height: '0px'
        }, 500);
        $(this).removeClass("rotate90");
      }
    });
    $(document).on("click", ".node", function(e) {
      $(this).attr("contenteditable", "true");
      return true;
    });
    $(document).on("keyup", ".node", function(e) {
      var id;
      id = parseInt($(this).attr("data-id"));
      graph.node(id).d3.html = $(this).html();
      graphUI.redraw();
      return true;
    });
    $(document).on("blur", ".node", function(e) {
      $(this).attr("contenteditable", "false");
      graphUI.redraw();
      return true;
    });
    $(document).on("click", ".node", function(e) {
      var button, container, id;
      e.stopPropagation();
      e.preventDefault();
      id = $(this).attr("data-id");
      $(".add-node-btn").not("[data-id=" + id + "]").fadeOut(100);
      container = $(this).parent();
      if ($(container).find(".add-node-btn").length === 0) {
        button = $("<i></i>").attr("class", "add-node-btn fa fa-plus-circle").attr("data-id", id).hide();
        $(container).append(button);
      }
      return $(container).find(".add-node-btn").fadeIn(250);
    });
    $(document).on("click", "body", function(e) {
      $(".add-node-btn").fadeOut(100);
      return $(".node").attr("contenteditable", "false");
    });
    $(document).on("click", ".add-node-btn", function(e) {
      var node;
      e.stopPropagation();
      e.preventDefault();
      node = parseInt($(this).attr("data-id"));
      graph.addNode("?", node);
      return graphUI.redraw();
    });
    $(document).on("dragover", function(e) {
      e.preventDefault();
      e.stopPropagation();
      return false;
    });
    $(document).on("dragstart", ".node", function(e) {
      var data;
      graphUI.dragged = parseInt($(this).attr("data-id"));
      data = {
        dragged: graphUI.dragged
      };
      setData(e, data);
    });
    $(document).on("dragover", "body", function(e) {
      var auxline, candidates, child, dists, min_dist, min_idx, nearest, node, p, parent, x, y;
      e.preventDefault();
      e.stopPropagation();
      p = $('#graph').position();
      x = e.originalEvent.clientX - p.left;
      y = e.originalEvent.clientY - p.top;
      candidates = (function() {
        var _i, _len, _ref, _results;
        _ref = graph._nodes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          if (node.d3.y < y) {
            _results.push(node);
          }
        }
        return _results;
      })();
      candidates = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = candidates.length; _i < _len; _i++) {
          node = candidates[_i];
          if (!graph.isDescendent(graphUI.dragged, node.id)) {
            _results.push(node);
          }
        }
        return _results;
      })();
      if (candidates.length === 0) {
        graphUI.selected = null;
        graphUI.drawAux([]);
        return;
      }
      dists = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = candidates.length; _i < _len; _i++) {
          node = candidates[_i];
          _results.push(Math.pow(node.d3.x - x, 2) + Math.pow(node.d3.y - y, 2));
        }
        return _results;
      })();
      min_dist = Math.min.apply(Math, dists);
      min_idx = dists.indexOf(min_dist);
      nearest = candidates[min_idx];
      graphUI.selected = nearest.id;
      if (graphUI.selected !== graphUI.dragged) {
        parent = graph.node(graphUI.selected);
        child = graph.node(graphUI.dragged);
        y = y - 5;
        auxline = {
          d3: {
            parent: {
              oldx: parent.d3.oldx,
              oldy: parent.d3.oldy,
              x: parent.d3.x,
              y: parent.d3.y
            },
            child: {
              oldx: x,
              oldy: y,
              x: x,
              y: y
            }
          }
        };
        graphUI.drawAux([auxline]);
      } else {
        graphUI.drawAux([]);
      }
      return true;
    });
    $(document).on("dragend", "body", function(e) {
      return graphUI.drawAux([]);
    });
    $(document).on("dragenter", ".fa-trash-o", function(e) {
      console.log("dragenter");
      $(this).addClass("dragover");
      graphUI.selected = null;
      return graphUI.drawAux([]);
    });
    $(document).on("dragleave", ".fa-trash-o", function(e) {
      return $(this).removeClass("dragover");
    });
    $(document).on("dragover", ".trashcan", function(e) {
      e.stopPropagation();
      return e.preventDefault();
    });
    $(document).on("drop", ".fa-trash-o", function(e) {
      var deleteAll;
      e.stopPropagation();
      e.preventDefault();
      deleteAll = function(id) {
        var child, node, _i, _len, _ref;
        node = graph.node(id);
        if (node.children.length > 0) {
          _ref = node.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            deleteAll(child);
          }
        }
        return graph.removeNode(id);
      };
      deleteAll(graphUI.dragged);
      d3.selectAll("#graph line[data-child='" + graphUI.dragged + "']").remove();
      graphUI.redraw();
      setTimeout(function() {
        return $("#trashcan").removeClass("dragover");
      }, 500);
    });
    $(document).on("drop", "body", function(e) {
      e.stopPropagation();
      e.preventDefault();
      console.log(graphUI.dragged);
      console.log(graphUI.selected);
      if (graphUI.dragged === graphUI.selected) {
        return;
      }
      if (graph.isDescendent(graphUI.dragged, graphUI.selected)) {
        return;
      }
      graph.moveNode(graphUI.dragged, graphUI.selected);
      if (graphUI.selected === null) {
        d3.selectAll("#graph line[data-child='" + graphUI.dragged + "']").remove();
      }
      graphUI.redraw();
    });
    $("#download").on("click", function(e) {
      var blob, text;
      text = graph.toJSON();
      blob = new Blob([text], {
        type: 'text/plain;charset=utf-8'
      });
      return saveAs(blob, 'graph.json');
    });
    $("#upload").on("click", function(e) {
      $(this).hide();
      return $("#file-chooser").show();
    });
    return $("#file-chooser").on("change", function(e) {
      var f, reader;
      f = e.target.files[0];
      reader = new FileReader();
      reader.onload = function(e) {
        graph.loadJSON(e.target.result);
        return graphUI.redraw();
      };
      reader.readAsText(f);
      $(this).hide();
      resetFormElement(this);
      return $("#upload").show();
    });
  });

  resetFormElement = function(el) {
    $(el).wrap('<form>').closest('form').get(0).reset();
    return $(el).unwrap();
  };

  setData = function(e, obj) {
    return e.originalEvent.dataTransfer.setData("text", JSON.stringify(obj));
  };

  getData = function(e) {
    return JSON.parse(e.originalEvent.dataTransfer.getData("text"));
  };

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
