// Generated by CoffeeScript 1.6.3
(function() {
  var getData, resetFormElement, setData;

  $(document).ready(function() {
    var child1, child2, intrash, newroot;
    window.graph = new Graph;
    window.graphUI = new Graph.vis(graph, $('#graph'));
    window.graph = graph;
    window.graphUI = graphUI;
    graph.addNode(null, null).d3.html = 'Root Node';
    child1 = graph.addNode(null, 0);
    child1.d3.html = 'Child 1';
    child2 = graph.addNode(null, 0);
    child2.d3.html = '<i class="fa fa-arrow-left"></i> Drag me under Child 1';
    graph.addNode(null, child2.id).d3.html = 'Click me<br>to edit text';
    newroot = graph.addNode(null, child1.id);
    newroot.d3.html = 'Drag me above<br>the Root Node';
    graph.addNode(null, newroot.id).d3.html = 'Click me, then<br>click the <i class="fa fa-plus-circle"></i>';
    graph.addNode(null, newroot.id);
    graph.addNode(null, child1.id).d3.html = 'Drag me<br>into the <i class="fa fa-trash-o">';
    graphUI.redraw();
    $("#show-instructions").on("click", function() {
      if ($('#instructions').height() === 0) {
        $('#instructions').animate({
          height: $('#instructions')[0].scrollHeight + 'px'
        }, 500);
        $(this).addClass("rotate90");
      } else {
        $('#instructions').animate({
          height: '0px'
        }, 500);
        $(this).removeClass("rotate90");
      }
    });
    $(document).on("click", ".node", function(e) {
      $(this).attr("contenteditable", "true");
      return true;
    });
    $(document).on("keyup", ".node", function(e) {
      var id;
      id = parseInt($(this).attr("data-id"));
      graph.node(id).d3.html = $(this).html();
      graphUI.redraw();
      return true;
    });
    $(document).on("blur", ".node", function(e) {
      $(this).attr("contenteditable", "false");
      graphUI.redraw();
      return true;
    });
    $(document).on("click", ".node", function(e) {
      var button, container, id;
      e.stopPropagation();
      e.preventDefault();
      id = $(this).attr("data-id");
      $(".add-node-btn").not("[data-id=" + id + "]").fadeOut(100);
      container = $(this).parent();
      if ($(container).find(".add-node-btn").length === 0) {
        button = $("<i></i>").attr("class", "add-node-btn fa fa-plus-circle").attr("data-id", id).hide();
        $(container).append(button);
      }
      return $(container).find(".add-node-btn").fadeIn(250);
    });
    $(document).on("click", "body", function(e) {
      $(".add-node-btn").fadeOut(100);
      return $(".node").attr("contenteditable", "false");
    });
    $(document).on("click", ".add-node-btn", function(e) {
      var node;
      e.stopPropagation();
      e.preventDefault();
      node = parseInt($(this).attr("data-id"));
      graph.addNode("?", node);
      return graphUI.redraw();
    });
    intrash = function(el) {
      var el_x, el_y, trash_x, trash_y;
      el_x = $(el).offset().left;
      el_y = $(el).offset().top;
      trash_x = $(".trashcan").offset().left + $(".trashcan").width();
      trash_y = $(".trashcan").offset().top + $(".trashcan").height();
      return el_x < trash_x && el_y < trash_y;
    };
    $(document).on("mousedown", ".node", function(e) {
      var dragstart, p, startx, starty;
      graphUI.dragged = parseInt($(this).attr("data-id"));
      p = $('#graph').position();
      startx = e.originalEvent.pageX - p.left;
      starty = e.originalEvent.pageY - p.top;
      dragstart = false;
      $(document).on("mousemove.drag", function(e) {
        var angle, angleNode, candidates, child, children_to_the_left, dist, dists, min_dist, min_idx, mouse_angle, nearest, node, parent, threshold, x, y;
        e.preventDefault();
        p = $('#graph').position();
        x = e.originalEvent.pageX - p.left;
        y = e.originalEvent.pageY - p.top;
        threshold = 10;
        dist = Math.sqrt((x - startx) * (x - startx) + (y - starty) * (y - starty));
        if (dist < threshold && !dragstart) {
          return;
        } else {
          dragstart = true;
          $(".node[data-id=" + graphUI.dragged + "]").attr('contenteditable', 'false');
        }
        child = graph.node(graphUI.dragged);
        graphUI.drawNodeAt(child.id, x - startx, y - starty);
        if (intrash(".node[data-id=" + graphUI.dragged + "]")) {
          $(".trashcan").addClass("dragover");
          graphUI.dropParent = null;
          $("#graph .edge[data-child=" + child.id + "]").attr("x1", function(d) {
            return child.d3.x + x - startx;
          }).attr("y1", function(d) {
            return child.d3.y + y - starty;
          });
          return;
        } else {
          $(".trashcan").removeClass("dragover");
        }
        dist = function(d) {
          return Math.sqrt(Math.pow(d.d3.x - x, 2) + Math.pow(d.d3.y - y, 2));
        };
        candidates = (function() {
          var _i, _len, _ref, _results;
          _ref = graph._nodes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            if (Math.abs(node.d3.y - y + graphUI.h) < graphUI.h / 2) {
              _results.push(node);
            }
          }
          return _results;
        })();
        candidates = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = candidates.length; _i < _len; _i++) {
            node = candidates[_i];
            if (!graph.isDescendent(graphUI.dragged, node.id)) {
              _results.push(node);
            }
          }
          return _results;
        })();
        if (candidates.length === 0) {
          graphUI.dropParent = null;
          $("#graph .edge[data-child=" + child.id + "]").attr("x1", function(d) {
            return child.d3.x + x - startx;
          }).attr("y1", function(d) {
            return child.d3.y + y - starty;
          });
          return;
        }
        dists = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = candidates.length; _i < _len; _i++) {
            node = candidates[_i];
            _results.push(dist(node));
          }
          return _results;
        })();
        min_dist = Math.min.apply(Math, dists);
        min_idx = dists.indexOf(min_dist);
        nearest = candidates[min_idx];
        graphUI.dropParent = nearest.id;
        if (graphUI.dropParent !== graphUI.dragged) {
          parent = graph.node(graphUI.dropParent);
          y = y - 5;
          $("#graph .edge[data-child=" + child.id + "]").attr("x1", function(d) {
            return parent.d3.x;
          }).attr("y1", function(d) {
            return parent.d3.y;
          });
          angle = function(x1, y1, x2, y2) {
            var rise, run;
            rise = y1 - y2;
            run = x1 - x2;
            return Math.atan2(rise, run);
          };
          angleNode = function(child, parent) {
            return angle(child.d3.x, child.d3.y, parent.d3.x, parent.d3.y);
          };
          child = graph.node(graphUI.dragged);
          parent = graph.node(graphUI.dropParent);
          mouse_angle = angle(child.d3.x + x - startx, child.d3.y + y - starty, parent.d3.x, parent.d3.y);
          children_to_the_left = (function() {
            var _i, _len, _ref, _results;
            _ref = parent.children;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              child = _ref[_i];
              if (angleNode(graph.node(child), parent) > mouse_angle && child !== graphUI.dragged) {
                _results.push(child);
              }
            }
            return _results;
          })();
        }
        return true;
      });
      $(document).on("mouseup", function(e) {
        var angle, angleNode, child, children_to_the_left, deleteAll, insert_at, mouse_angle, parent, x, y;
        $(document).off("mousemove.drag");
        $(".node[data-id=" + graphUI.dragged + "]").attr('contenteditable', 'true');
        if (dragstart) {
          dragstart = false;
          e.stopPropagation();
          e.preventDefault();
          p = $('#graph').position();
          x = e.originalEvent.pageX - p.left;
          y = e.originalEvent.pageY - p.top;
          if (graphUI.dropParent === null) {
            d3.selectAll("#graph line[data-child='" + graphUI.dragged + "']").remove();
            if (intrash(".node[data-id=" + graphUI.dragged + "]")) {
              deleteAll = function(id) {
                var child, node, _i, _len, _ref;
                node = graph.node(id);
                if (node.children.length > 0) {
                  _ref = node.children;
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    child = _ref[_i];
                    deleteAll(child);
                  }
                }
                return graph.removeNode(id);
              };
              deleteAll(graphUI.dragged);
              setTimeout(function() {
                return $("#trashcan").removeClass("dragover");
              }, 500);
            } else {
              graph.moveNode(graphUI.dragged, graphUI.dropParent);
            }
            graphUI.redraw();
            return;
          } else {
            if (graphUI.dragged === graphUI.dropParent) {
              return;
            }
            if (graph.isDescendent(graphUI.dragged, graphUI.dropParent)) {
              return;
            }
            angle = function(x1, y1, x2, y2) {
              var rise, run;
              rise = y1 - y2;
              run = x1 - x2;
              return Math.atan2(rise, run);
            };
            angleNode = function(child, parent) {
              return angle(child.d3.x, child.d3.y, parent.d3.x, parent.d3.y);
            };
            child = graph.node(graphUI.dragged);
            parent = graph.node(graphUI.dropParent);
            mouse_angle = angle(child.d3.x + x - startx, child.d3.y + y - starty, parent.d3.x, parent.d3.y);
            children_to_the_left = (function() {
              var _i, _len, _ref, _results;
              _ref = parent.children;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                child = _ref[_i];
                if (angleNode(graph.node(child), parent) > mouse_angle && child !== graphUI.dragged) {
                  _results.push(child);
                }
              }
              return _results;
            })();
            insert_at = children_to_the_left.length;
            graph.moveNode(graphUI.dragged, graphUI.dropParent, insert_at);
          }
          graphUI.redraw();
          graphUI.dragged = null;
        }
      });
    });
    $("#download").on("click", function(e) {
      var blob, text;
      text = graph.toJSON();
      blob = new Blob([text], {
        type: 'text/plain;charset=utf-8'
      });
      return saveAs(blob, 'graph.json');
    });
    $("#upload").on("click", function(e) {
      $(this).hide();
      return $("#file-chooser").show();
    });
    return $("#file-chooser").on("change", function(e) {
      var f, reader;
      f = e.target.files[0];
      reader = new FileReader();
      reader.onload = function(e) {
        graph.loadJSON(e.target.result);
        return graphUI.redraw();
      };
      reader.readAsText(f);
      $(this).hide();
      resetFormElement(this);
      return $("#upload").show();
    });
  });

  resetFormElement = function(el) {
    $(el).wrap('<form>').closest('form').get(0).reset();
    return $(el).unwrap();
  };

  setData = function(e, obj) {
    return e.originalEvent.dataTransfer.setData("text", JSON.stringify(obj));
  };

  getData = function(e) {
    return JSON.parse(e.originalEvent.dataTransfer.getData("text"));
  };

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
